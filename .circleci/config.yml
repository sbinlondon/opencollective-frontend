version: 2

aliases:
  crowdin_branch: &crowdin_branch /i18n\/crowdin.*/

  restore_npm_cache: &restore_npm_cache
    restore_cache:
      name: Restore npm cache
      keys:
        - npm-cache-{{ checksum "package.json" }}
        - npm-cache-

  persist_npm_cache: &persist_npm_cache
    save_cache:
      name: Persist npm cache
      key: npm-cache-{{ checksum "package.json" }}
      paths:
        - ../.npm

  e2e_steps: &e2e_steps
    steps:
      - run: sudo apt -y update

      # Used in setup_circleci_db.sh (dropdb, psql and pg_restore)
      - run: sudo apt -y install postgresql-client

      # Cypress dependencies
      # See: https://github.com/cypress-io/cypress-docker-images/blob/master/base/ubuntu16/Dockerfile
      - run: sudo apt -y install libgtk2.0-0 libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 xvfb

      - attach_workspace:
          at: ..

      - checkout

      - <<: *restore_npm_cache
      - run: CYPRESS_INSTALL_BINARY=0 npm ci

      # # We run npm ci in case node_modules are not persisted
      # # When it is persisted we don't need it
      # - run: cd ~/api && npm ci --only-prod

      # We run npm ci in case node_modules are not persisted
      # When it is persisted we don't need it
      - run: cd ~/frontend && npm ci --only=prod

      # Cypress installation with cache
      - restore_cache:
          keys:
            - cypress-cache-{{ checksum "node_modules/cypress/package.json" }}
      - run: npx cypress install
      - save_cache:
          key: cypress-cache-{{ checksum "node_modules/cypress/package.json" }}
          paths:
            - ../.cache/Cypress

      # Loading the opencollective_dvl dump database
      - run: ./scripts/setup_circleci_db.sh

      - run: ./scripts/run_e2e_tests.sh

jobs:
  lint:
    docker:
      - image: circleci/node:12.13.0
    environment:
      NODE_ENV: circleci
    steps:
      - checkout
      - <<: *restore_npm_cache
      - run: CYPRESS_INSTALL_BINARY=0 npm ci
      - <<: *persist_npm_cache
      - run: npm run lint
      - run: npm run prettier:check

  jest:
    docker:
      - image: circleci/node:12.13.0
    environment:
      NODE_ENV: circleci
    steps:
      - checkout
      - <<: *restore_npm_cache
      - run: CYPRESS_INSTALL_BINARY=0 npm ci
      - <<: *persist_npm_cache
      - run: npm run test:jest

  update-langs:
    docker:
      - image: circleci/node:12.13.0
    environment:
      NODE_ENV: circleci
    steps:
      - checkout
      - <<: *restore_npm_cache
      - run: CYPRESS_INSTALL_BINARY=0 npm ci
      - <<: *persist_npm_cache
      - run: ./scripts/check_translations.sh

  build:
    docker:
      - image: circleci/node:12.13.0
    environment:
      NODE_ENV: circleci
    steps:
      - checkout
      - <<: *restore_npm_cache
      - run: CYPRESS_INSTALL_BINARY=0 npm ci
      - <<: *persist_npm_cache

      - restore_cache:
          name: Restore next build cache
          keys:
            - next-build-cache-{{ .Revision }}
            - next-build-cache-

      - run: npm run build:clean
      - run: npm run build:updates
      - run: npm run build:next
      - run: npm run build:server

      - save_cache:
          name: Persist next build cache
          key: next-build-cache-{{ .Revision }}
          paths:
            # In Next.js 8 it will be
            - ./node_modules/.cache/next-minifier

      # # We prune to save space in node_modules persistence
      # # If we don't persist node_modules, we don't need it
      # - run: npm prune --production

      # We persist only the build folder
      - run: mkdir ../frontend
      - run: cp -R dist ../frontend/
      - run: cp package*.json ../frontend/

      - persist_to_workspace:
          root: ..
          paths:
            - frontend

  build-api:
    docker:
      - image: circleci/node:12.13.0
      - image: circleci/postgres:9.6.8-alpine-postgis-ram
    environment:
      NODE_ENV: circleci
      E2E_TEST: 1
    steps:
      - run: sudo apt -y update

      # Used in setup_circleci_db.sh (dropdb ,psql and pg_restore)
      - run: sudo apt -y install postgresql-client

      - checkout

      - run: ./scripts/setup_circleci_checkout_api.sh

      - restore_cache:
          keys:
            - npm-api-cache-{{ checksum "~/api/package.json" }}
            - npm-api-cache-

      - run: cd ~/api && npm ci

      - save_cache:
          key: npm-api-cache-{{ checksum "~/api/package.json" }}
          paths:
            - ../.npm

      - run: cd ~/api && npm run build

      # We prune to save space in node_modules persistence
      # If we don't persist node_modules, we don't need it
      - run: cd ~/api && npm prune --production

      - persist_to_workspace:
          root: ..
          paths:
            - api/config
            - api/dist
            - api/migrations
            - api/node_modules # We persist node_modules, no need to install later on
            - api/scripts/db_restore.sh
            - api/scripts/db_setup.js
            - api/scripts/sequelize.sh
            - api/server # We should refactor so we don't need it in scripts
            - api/test/dbdumps/opencollective_dvl.pgsql # We need the DB dump for e2e
            - api/templates
            - api/.babelrc
            - api/package.json
            - api/package-lock.json

  test-e2e-0:
    docker:
      - image: circleci/node:12.13.0
      - image: circleci/postgres:9.6.8-alpine-postgis-ram
      - image: circleci/redis
      - image: memcached
    environment:
      TZ: UTC
      NODE_ENV: circleci
      # E2E_TEST will be checked by the API to tweak its behavior in CIRCLECI environment
      E2E_TEST: 1
      CYPRESS_TEST_FILES: 0*.js
      CYPRESS_RECORD: false
      CYPRESS_VIDEO: false
    <<: *e2e_steps

  test-e2e-1:
    docker:
      - image: circleci/node:12.13.0
      - image: circleci/postgres:9.6.8-alpine-postgis-ram
      - image: circleci/redis
      - image: memcached
    environment:
      TZ: UTC
      NODE_ENV: circleci
      # E2E_TEST will be checked by the API to tweak its behavior in CIRCLECI environment
      E2E_TEST: 1
      CYPRESS_TEST_FILES: 1*.js
      CYPRESS_RECORD: false
      CYPRESS_VIDEO: false
    <<: *e2e_steps

  test-e2e-2:
    docker:
      - image: circleci/node:12.13.0
      - image: circleci/postgres:9.6.8-alpine-postgis-ram
      - image: circleci/redis
      - image: memcached
    environment:
      TZ: UTC
      NODE_ENV: circleci
      # E2E_TEST will be checked by the API to tweak its behavior in CIRCLECI environment
      E2E_TEST: 1
      CYPRESS_TEST_FILES: 2*.js
      CYPRESS_RECORD: false
      CYPRESS_VIDEO: false
    <<: *e2e_steps

  test-e2e-3:
    docker:
      - image: circleci/node:12.13.0
      - image: circleci/postgres:9.6.8-alpine-postgis-ram
      - image: circleci/redis
      - image: memcached
    environment:
      TZ: UTC
      NODE_ENV: circleci
      # E2E_TEST will be checked by the API to tweak its behavior in CIRCLECI environment
      E2E_TEST: 1
      CYPRESS_TEST_FILES: 3*.js
      CYPRESS_RECORD: false
      CYPRESS_VIDEO: false
    <<: *e2e_steps

workflows:
  version: 2
  lint-build-test:
    jobs:
      - update-langs
      - lint:
          filters: { branches: { ignore: [*crowdin_branch] } }
      - jest:
          filters: { branches: { ignore: [*crowdin_branch] } }
      - build:
          filters: { branches: { ignore: [*crowdin_branch] } }
      - build-api:
          filters: { branches: { ignore: [*crowdin_branch] } }
      - test-e2e-0:
          filters: { branches: { ignore: [*crowdin_branch] } }
          requires:
            - build
            - build-api
      - test-e2e-1:
          filters: { branches: { ignore: [*crowdin_branch] } }
          requires:
            - build
            - build-api
      - test-e2e-2:
          filters: { branches: { ignore: [*crowdin_branch] } }
          requires:
            - build
            - build-api
      - test-e2e-3:
          filters: { branches: { ignore: [*crowdin_branch] } }
          requires:
            - build
            - build-api
